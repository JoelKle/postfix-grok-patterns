filter {
  if [program] == "postfix/smtpd" and [message] =~ /^disconnect from / {
    aggregate {
      task_id => "%{logsource}%{pid}%{postfix_client_hostname}%{postfix_client_ip}"
      code => "
      map ||= {}
      event.to_hash.each { |k,v|
        if k.to_s !~ /\@.+/
          map[k] ||= []
          if !map[k].is_a?(Array) then map[k] = [map[k]] end
          if v.is_a?(Array) then map[k] |= v else map[k] |= [v] end
          if map[k].count == 1 then map[k] = map[k].first end
        end
      }
      map.each { |k,v|
        event.set(k, v)
      }
      "
      map_action => "update"
      inactivity_timeout => 300  # 5 Minuten
      timeout => 1800  # 30 Minuten
      push_map_as_event_on_timeout => true
      end_of_task => true
      timeout_task_id_field => 'aggr_postfix_smtpd_taskid'
      timeout_tags => ['_aggr_postfix_smtpd_timeout']
      add_tag => ['_aggr_postfix_smtpd_end']
      aggregate_maps_path => "/etc/logstash/.mail_aggregate_maps"
    }
    aggregate {
      task_id => "%{logsource}%{postfix_from}%{postfix_to}%{postfix_client_hostname}%{postfix_client_ip}"
      code => "
      map ||= {}
      event.to_hash.each { |k,v|
        if k.to_s !~ /\@.+/
          map[k] ||= []
          if !map[k].is_a?(Array) then map[k] = [map[k]] end
          if v.is_a?(Array) then map[k] |= v else map[k] |= [v] end
          if map[k].count == 1 then map[k] = map[k].first end
        end
      }
      map.each { |k,v|
        event.set(k, v)
      }
      "
      map_action => "update"
      inactivity_timeout => 300  # 5 Minuten
      timeout => 1800  # 30 Minuten
      push_map_as_event_on_timeout => true
      end_of_task => true
      timeout_task_id_field => 'aggr_postfwd_taskid'
      timeout_tags => ['_aggr_postfwd_timeout']
      add_tag => ['_aggr_postfwd_end']
    }
  } else if [program] == "postfix/smtpd" {
    aggregate {
      task_id => "%{logsource}%{pid}%{postfix_client_hostname}%{postfix_client_ip}"
      code => "
      map ||= {}
      event.to_hash.each { |k,v|
        if k.to_s !~ /\@.+/
          map[k] ||= []
          if !map[k].is_a?(Array) then map[k] = [map[k]] end
          if v.is_a?(Array) then map[k] |= v else map[k] |= [v] end
          if map[k].count == 1 then map[k] = map[k].first end
        end
      }
      event.cancel()
      "
      map_action => "create_or_update"
    }


  } else if [program] == "postfix/qmgr" and [message] =~ /: removed$/ and [postfix_queueid] {
    aggregate {
      task_id => "%{logsource}%{postfix_queueid}"
      code => "
      map ||= {}
      event.to_hash.each { |k,v|
        if k.to_s !~ /\@.+/
          map[k] ||= []
          if !map[k].is_a?(Array) then map[k] = [map[k]] end
          if v.is_a?(Array) then map[k] |= v else map[k] |= [v] end
          if map[k].count == 1 then map[k] = map[k].first end
        end
      }
      map.each { |k,v|
        event.set(k, v)
      }
      "
      map_action => "update"
      inactivity_timeout => 300  # 5 Minuten
      timeout => 1800  # 30 Minuten
      push_map_as_event_on_timeout => true
      end_of_task => true
      timeout_task_id_field => 'aggr_postfix_queue_taskid'
      timeout_tags => ['_aggr_postfix_queue_timeout']
      add_tag => ['_aggr_postfix_queue_end']
    }
  } else if [program] =~ /^postfix.*/ and [postfix_queueid] {
    aggregate {
      task_id => "%{logsource}%{postfix_queueid}"
      code => "
      map ||= {}
      event.to_hash.each { |k,v|
        if k.to_s !~ /\@.+/
          map[k] ||= []
          if !map[k].is_a?(Array) then map[k] = [map[k]] end
          if v.is_a?(Array) then map[k] |= v else map[k] |= [v] end
          if map[k].count == 1 then map[k] = map[k].first end
        end
      }
      event.cancel()
      "
      map_action => "create_or_update"
    }


  } else if [program] == "postfwd2/policy" {
    aggregate {
      task_id => "%{logsource}%{postfix_from}%{postfix_to}%{postfix_client_hostname}%{postfix_client_ip}"
      code => "
      map ||= {}
      event.to_hash.each { |k,v|
        if k.to_s !~ /\@.+/
          map[k] ||= []
          if !map[k].is_a?(Array) then map[k] = [map[k]] end
          if v.is_a?(Array) then map[k] |= v else map[k] |= [v] end
          if map[k].count == 1 then map[k] = map[k].first end
        end
      }
      event.cancel()
      "
      map_action => "create"
    }


  } else if [program] == "sophos-message" {
    aggregate {
      task_id => "1%{logsource}%{sophos-message_queueid}"
      code => "
      map ||= {}
      event.to_hash.each { |k,v|
        if k.to_s !~ /\@.+/
          map[k] ||= []
          if !map[k].is_a?(Array) then map[k] = [map[k]] end
          if v.is_a?(Array) then map[k] |= v else map[k] |= [v] end
          if map[k].count == 1 then map[k] = map[k].first end
        end
      }
      map.each { |k,v|
        event.set(k, v)
      }
      "
      map_action => "create_or_update"
      inactivity_timeout => 300  # 5 Minuten
      timeout => 1800  # 30 Minuten
      push_map_as_event_on_timeout => true
      end_of_task => true
      timeout_task_id_field => 'aggr_sophos_taskid'
      timeout_tags => ['_aggr_sophos_timeout']
      add_tag => ['_aggr_sophos_end', '_aggr_sophos_end_1' ]
    }
    if "_aggr_sophos_end_2" not in [tags] {
      aggregate {
        task_id => "2%{logsource}%{sophos-message_queueid}"
        code => "
        map ||= {}
        event.to_hash.each { |k,v|
          if k.to_s !~ /\@.+/
            map[k] ||= []
            if !map[k].is_a?(Array) then map[k] = [map[k]] end
            if v.is_a?(Array) then map[k] |= v else map[k] |= [v] end
            if map[k].count == 1 then map[k] = map[k].first end
          end
        }
        event.cancel()
        "
        map_action => "create"
      }
    }
  }


  if ( ( "_aggr_postfix_smtpd_end" in [tags] or "_aggr_postfix_smtpd_timeout" in [tags] ) and [postfix_queueid] ) {
    aggregate {
      task_id => "1sum%{logsource}%{postfix_queueid}"
      code => "
      map ||= {}
      event.to_hash.each { |k,v|
        if k.to_s !~ /\@.+/
          map[k] ||= []
          if !map[k].is_a?(Array) then map[k] = [map[k]] end
          if v.is_a?(Array) then map[k] |= v else map[k] |= [v] end
          if map[k].count == 1 then map[k] = map[k].first end
        end
      }
      map.each { |k,v|
        event.set(k, v)
      }
      "
      map_action => "create_or_update"
      inactivity_timeout => 300  # 5 Minuten
      timeout => 1800  # 30 Minuten
      push_map_as_event_on_timeout => true
      end_of_task => true
      timeout_task_id_field => 'aggr_postfix_sum_taskid'
      timeout_tags => ['_aggr_postfix_sum_timeout']
      add_tag => ['_aggr_postfix_sum_end', '_aggr_postfix_sum_end_1']
    }
    if '_aggr_postfix_sum_end_2' not in [tags] {
      aggregate {
        task_id => "2sum%{logsource}%{postfix_queueid}"
        code => "
        map ||= {}
        event.to_hash.each { |k,v|
          if k.to_s !~ /\@.+/
            map[k] ||= []
            if !map[k].is_a?(Array) then map[k] = [map[k]] end
            if v.is_a?(Array) then map[k] |= v else map[k] |= [v] end
            if map[k].count == 1 then map[k] = map[k].first end
          end
        }
        event.cancel()
        "
        map_action => "create"
      }
    }
  } else if ( ( "_aggr_postfix_queue_end" in [tags] or "_aggr_postfix_queue_timeout" in [tags] ) and [postfix_queueid] ) {
    aggregate {
      task_id => "2sum%{logsource}%{postfix_queueid}"
      code => "
      map ||= {}
      event.to_hash.each { |k,v|
        if k.to_s !~ /\@.+/
          map[k] ||= []
          if !map[k].is_a?(Array) then map[k] = [map[k]] end
          if v.is_a?(Array) then map[k] |= v else map[k] |= [v] end
          if map[k].count == 1 then map[k] = map[k].first end
        end
      }
      map.each { |k,v|
        event.set(k, v)
      }
      "
      map_action => "create_or_update"
      inactivity_timeout => 300  # 5 Minuten
      timeout => 1800  # 30 Minuten
      push_map_as_event_on_timeout => true
      end_of_task => true
      timeout_task_id_field => 'aggr_postfix_sum_taskid'
      timeout_tags => ['_aggr_postfix_sum_timeout']
      add_tag => ['_aggr_postfix_sum_end', '_aggr_postfix_sum_end_2']
    }
    if '_aggr_postfix_sum_end_1' not in [tags] {
      aggregate {
        task_id => "1sum%{logsource}%{postfix_queueid}"
        code => "
        map ||= {}
        event.to_hash.each { |k,v|
          if k.to_s !~ /\@.+/
            map[k] ||= []
            if !map[k].is_a?(Array) then map[k] = [map[k]] end
            if v.is_a?(Array) then map[k] |= v else map[k] |= [v] end
            if map[k].count == 1 then map[k] = map[k].first end
          end
        }
        event.cancel()
        "
        map_action => "create"
      }
    }
  }


  if ( ( "_aggr_postfix_sum_end" in [tags] or "_aggr_postfix_sum_timeout" in [tags] ) and [postfix_relay_ip] =~ /^127.0.0.1$/ and [postfix_smtp_response_queueid] ) {
    aggregate {
      task_id => "1%{logsource}%{postfix_message-id}"
      code => "
      map ||= {}
      event.to_hash.each { |k,v|
        if k.to_s !~ /\@.+/
          map[k] ||= []
          if !map[k].is_a?(Array) then map[k] = [map[k]] end
          if v.is_a?(Array) then map[k] |= v else map[k] |= [v] end
          if map[k].count == 1 then map[k] = map[k].first end
        end
      }
      map.each { |k,v|
        event.set(k, v)
      }
      "
      map_action => "create_or_update"
      inactivity_timeout => 300  # 5 Minuten
      timeout => 1800  # 30 Minuten
      push_map_as_event_on_timeout => true
      end_of_task => true
      timeout_task_id_field => 'aggr_local_taskid'
      timeout_tags => ['_aggr_local_timeout']
      add_tag => ['_aggr_local_end', '_aggr_local_end_1']
    }
    if '_aggr_local_end_2' not in [tags] {
      aggregate {
        task_id => "2%{logsource}%{postfix_message-id}"
        code => "
        map ||= {}
        event.to_hash.each { |k,v|
          if k.to_s !~ /\@.+/
            map[k] ||= []
            if !map[k].is_a?(Array) then map[k] = [map[k]] end
            if v.is_a?(Array) then map[k] |= v else map[k] |= [v] end
            if map[k].count == 1 then map[k] = map[k].first end
          end
        }
        event.cancel()
        "
        map_action => "create"
      }
    }
  } else if ( ( "_aggr_postfix_sum_end" in [tags] or "_aggr_postfix_sum_timeout" in [tags] ) and [postfix_client_ip] =~ /^127.0.0.1$/ ) {
    aggregate {
      task_id => "2%{logsource}%{postfix_message-id}"
      code => "
      map ||= {}
      event.to_hash.each { |k,v|
        if k.to_s !~ /\@.+/
          map[k] ||= []
          if !map[k].is_a?(Array) then map[k] = [map[k]] end
          if v.is_a?(Array) then map[k] |= v else map[k] |= [v] end
          if map[k].count == 1 then map[k] = map[k].first end
        end
      }
      map.each { |k,v|
        event.set(k, v)
      }
      "
      map_action => "create_or_update"
      inactivity_timeout => 300  # 5 Minuten
      timeout => 1800  # 30 Minuten
      push_map_as_event_on_timeout => true
      end_of_task => true
      timeout_task_id_field => 'aggr_local_taskid'
      timeout_tags => ['_aggr_local_timeout']
      add_tag => ['_aggr_local_end', '_aggr_local_end_2']
    }
    if '_aggr_local_end_1' not in [tags] {
      aggregate {
        task_id => "1%{logsource}%{postfix_message-id}"
        code => "
        map ||= {}
        event.to_hash.each { |k,v|
          if k.to_s !~ /\@.+/
            map[k] ||= []
            if !map[k].is_a?(Array) then map[k] = [map[k]] end
            if v.is_a?(Array) then map[k] |= v else map[k] |= [v] end
            if map[k].count == 1 then map[k] = map[k].first end
          end
        }
        event.cancel()
        "
        map_action => "create"
      }
    }
  } else if ( ( "_aggr_postfix_sum_end" in [tags] or "_aggr_postfix_sum_timeout" in [tags] ) and [postfix_relay_ip] =~ /^127.0.0.1$/ and ![postfix_smtp_response_queueid] ) {
    mutate {
      add_tag => ['_aggr_local_end']
    }
  }


  if ( ( "_aggr_local_end" in [tags] or "_aggr_local_timeout" in [tags] ) and [sophos-message_queueid] ) {
    aggregate {
      task_id => "2%{logsource}%{sophos-message_queueid}"
      code => "
      map ||= {}
      event.to_hash.each { |k,v|
        if k.to_s !~ /\@.+/
          map[k] ||= []
          if !map[k].is_a?(Array) then map[k] = [map[k]] end
          if v.is_a?(Array) then map[k] |= v else map[k] |= [v] end
          if map[k].count == 1 then map[k] = map[k].first end
        end
      }
      map.each { |k,v|
        event.set(k, v)
      }
      "
      map_action => "create_or_update"
      inactivity_timeout => 300  # 5 Minuten
      timeout => 1800  # 30 Minuten
      push_map_as_event_on_timeout => true
      end_of_task => true
      timeout_task_id_field => 'aggr_sophos_taskid'
      timeout_tags => ['_aggr_sophos_timeout']
      add_tag => ['_aggr_sophos_end', '_aggr_sophos_end_2' ]
    }
    if "_aggr_sophos_end_1" not in [tags] {
      aggregate {
        task_id => "1%{logsource}%{sophos-message_queueid}"
        code => "
        map ||= {}
        event.to_hash.each { |k,v|
          if k.to_s !~ /\@.+/
            map[k] ||= []
            if !map[k].is_a?(Array) then map[k] = [map[k]] end
            if v.is_a?(Array) then map[k] |= v else map[k] |= [v] end
            if map[k].count == 1 then map[k] = map[k].first end
          end
        }
        event.cancel()
        "
        map_action => "create"
      }
    }
  }
}
